{"version":3,"file":"exceldate2.esm.js","sources":["../src/index.ts"],"sourcesContent":["const secondsInDay = 24 * 60 * 60\nconst millisecondsInDay = secondsInDay * 1000;\nconst missingLeapYearDay = millisecondsInDay\n\nexport function getExcelEpoch()\n{\n\tconst excelEpoch = new Date(Date.UTC(1899, 11, 31))\n\n\treturn excelEpoch\n}\n\nexport function getExcelDelta()\n{\n\tconst excelEpochTs = getExcelEpoch().getTime();\n\n\tconst excelDelta = excelEpochTs - missingLeapYearDay\n\n\treturn excelDelta\n}\n\nexport type IExcelDateNumberInput = string | number;\n\nexport function validDateNumber(excelDateNumber: number): excelDateNumber is number\n{\n\treturn !(typeof excelDateNumber !== 'number' || !Number.isFinite(excelDateNumber) || Number.isNaN(excelDateNumber) || excelDateNumber <= 0)\n}\n\nexport function excelDateNumber(excelDate: IExcelDateNumberInput): number\n{\n\t// @ts-ignore\n\tconst value = Number.parseFloat(excelDate, 10)\n\n\tif (validDateNumber(value))\n\t{\n\t\treturn value\n\t}\n}\n\n/**\n * Convert input to a number\n */\nexport function excelDateNumberToTs(excelDate: IExcelDateNumberInput)\n{\n\tconst value = excelDateNumber(excelDate)\n\n\tif (typeof value === 'number')\n\t{\n\t\t//const excelDateSeconds = value * secondsInDay;\n\t\tconst excelDateMilliseconds = value * millisecondsInDay;\n\n\t\treturn excelDateMilliseconds\n\t}\n}\n\nexport function ts2excel(milliseconds: number)\n{\n\tconst excelDelta = getExcelDelta();\n\n\treturn milliseconds - excelDelta;\n}\n\nexport function date2excel(date: Date)\n{\n\treturn ts2excel(date.getTime());\n}\n\n/**\n * Convert input to JS Date\n * Details here (mostly in comments): https://gist.github.com/christopherscott/2782634\n *\n * @link https://gist.github.com/christopherscott/2782634\n */\nexport function exceldateTs<T = number>(excelDate: IExcelDateNumberInput,\n\tdone = (err: Error, unixTs?: number): T =>\n\t{\n\t\tif (err) throw err\n\t\treturn unixTs as any\n\t},\n)\n{\n\tif (!excelDate)\n\t{\n\t\treturn done(new Error('No first argument provided, nothing to convert.'))\n\t}\n\n\ttry\n\t{\n\t\tconst excelTs = excelDateNumberToTs(excelDate);\n\n\t\tif (typeof excelTs !== 'number')\n\t\t{\n\t\t\treturn done(new Error('First argument could not be parsed.'))\n\t\t}\n\n\t\tconst excelDelta = getExcelDelta();\n\n\t\tconst unixTs = excelTs + excelDelta\n\n\t\treturn done(null, unixTs)\n\t}\n\tcatch (e)\n\t{\n\t\treturn done(e)\n\t}\n}\n\n/**\n * Takes an Excel timestamp (as a number or string) and returns a corresponding Date object\n */\nexport function exceldate<T = Date>(excelDate: IExcelDateNumberInput,\n\tdone = (err: Error, res?: Date): T =>\n\t{\n\t\tif (err) throw err\n\t\treturn res as any\n\t},\n)\n{\n\treturn exceldateTs(excelDate, (err: Error, unixTs?: number) => {\n\t\tif (err)\n\t\t{\n\t\t\treturn done(err)\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tconst jsDate = new Date(unixTs)\n\t\t\t\treturn done(null, jsDate)\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\treturn done(e)\n\t\t\t}\n\t\t}\n\t})\n}\n\nexport default exceldate\n"],"names":["secondsInDay","millisecondsInDay","missingLeapYearDay","getExcelEpoch","excelEpoch","Date","UTC","getExcelDelta","excelEpochTs","getTime","excelDelta","validDateNumber","excelDateNumber","Number","isFinite","isNaN","excelDate","value","parseFloat","excelDateNumberToTs","excelDateMilliseconds","ts2excel","milliseconds","date2excel","date","exceldateTs","done","err","unixTs","Error","excelTs","e","exceldate","res","jsDate"],"mappings":"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"}