{"version":3,"file":"exceldate2.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["\nexport function exceldateTs<T = number>(excelDate: string | number,\n\tdone = (err: Error, unixTs?: number): T =>\n\t{\n\t\tif (err) throw err\n\t\treturn unixTs as any\n\t},\n)\n{\n\tif (!excelDate)\n\t{\n\t\treturn done(new Error('No first argument provided, nothing to convert.'))\n\t}\n\ttry\n\t{\n\t\t// Convert input to a number\n\t\t// @ts-ignore\n\t\tconst excelDateNumber = Number.parseFloat(excelDate, 10)\n\t\tif (Number.isNaN(excelDateNumber))\n\t\t{\n\t\t\treturn done(new Error('First argument could not be parsed.'))\n\t\t}\n\n\t\t// Convert input to JS Date\n\t\t// Details here (mostly in comments): https://gist.github.com/christopherscott/2782634\n\t\tconst secondsInDay = 24 * 60 * 60\n\t\tconst excelEpoch = new Date(Date.UTC(1899, 11, 31))\n\t\tconst excelEpochTs = excelEpoch.getTime()\n\t\tconst missingLeapYearDay = secondsInDay * 1000\n\n\t\tconst excelDelta = excelEpochTs - missingLeapYearDay\n\t\tconst excelTs = excelDateNumber * secondsInDay * 1000\n\t\tconst unixTs = excelTs + excelDelta\n\n\t\treturn done(null, unixTs)\n\t}\n\tcatch (e)\n\t{\n\t\treturn done(e)\n\t}\n}\n\n/**\n * Takes an Excel timestamp (as a number or string) and returns a corresponding Date object\n */\nexport function exceldate<T = Date>(excelDate: string | number,\n\tdone = (err: Error, res?: Date): T =>\n\t{\n\t\tif (err) throw err\n\t\treturn res as any\n\t},\n)\n{\n\treturn exceldateTs(excelDate, (err: Error, unixTs?: number) => {\n\t\tif (err)\n\t\t{\n\t\t\treturn done(err)\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tconst jsDate = new Date(unixTs)\n\t\t\t\treturn done(null, jsDate)\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\treturn done(e)\n\t\t\t}\n\t\t}\n\t})\n}\n\nexport default exceldate\n"],"names":["exceldateTs","excelDate","done","err","unixTs","Error","excelDateNumber","Number","parseFloat","isNaN","secondsInDay","excelEpoch","Date","UTC","excelEpochTs","getTime","missingLeapYearDay","excelDelta","excelTs","e","exceldate","res","jsDate"],"mappings":";;;;SACgBA,YAAwBC,WACvCC;MAAAA;AAAAA,IAAAA,OAAO,cAACC,GAAD,EAAaC,MAAb;AAEN,UAAID,GAAJ,EAAS,MAAMA,GAAN;AACT,aAAOC,MAAP;AACA;;;AAGD,MAAI,CAACH,SAAL,EACA;AACC,WAAOC,IAAI,CAAC,IAAIG,KAAJ,CAAU,iDAAV,CAAD,CAAX;AACA;;AACD,MACA;AACC;AACA;AACA,QAAMC,eAAe,GAAGC,MAAM,CAACC,UAAP,CAAkBP,SAAlB,EAA6B,EAA7B,CAAxB;;AACA,QAAIM,MAAM,CAACE,KAAP,CAAaH,eAAb,CAAJ,EACA;AACC,aAAOJ,IAAI,CAAC,IAAIG,KAAJ,CAAU,qCAAV,CAAD,CAAX;AACA,KAPF;AAUC;;;AACA,QAAMK,YAAY,GAAG,KAAK,EAAL,GAAU,EAA/B;AACA,QAAMC,UAAU,GAAG,IAAIC,IAAJ,CAASA,IAAI,CAACC,GAAL,CAAS,IAAT,EAAe,EAAf,EAAmB,EAAnB,CAAT,CAAnB;AACA,QAAMC,YAAY,GAAGH,UAAU,CAACI,OAAX,EAArB;AACA,QAAMC,kBAAkB,GAAGN,YAAY,GAAG,IAA1C;AAEA,QAAMO,UAAU,GAAGH,YAAY,GAAGE,kBAAlC;AACA,QAAME,OAAO,GAAGZ,eAAe,GAAGI,YAAlB,GAAiC,IAAjD;AACA,QAAMN,MAAM,GAAGc,OAAO,GAAGD,UAAzB;AAEA,WAAOf,IAAI,CAAC,IAAD,EAAOE,MAAP,CAAX;AACA,GAtBD,CAuBA,OAAOe,CAAP,EACA;AACC,WAAOjB,IAAI,CAACiB,CAAD,CAAX;AACA;AACD;AAED;;;;SAGgBC,UAAoBnB,WACnCC;MAAAA;AAAAA,IAAAA,OAAO,cAACC,GAAD,EAAakB,GAAb;AAEN,UAAIlB,GAAJ,EAAS,MAAMA,GAAN;AACT,aAAOkB,GAAP;AACA;;;AAGD,SAAOrB,WAAW,CAACC,SAAD,EAAY,UAACE,GAAD,EAAaC,MAAb;AAC7B,QAAID,GAAJ,EACA;AACC,aAAOD,IAAI,CAACC,GAAD,CAAX;AACA,KAHD,MAKA;AACC,UACA;AACC,YAAMmB,MAAM,GAAG,IAAIV,IAAJ,CAASR,MAAT,CAAf;AACA,eAAOF,IAAI,CAAC,IAAD,EAAOoB,MAAP,CAAX;AACA,OAJD,CAKA,OAAOH,CAAP,EACA;AACC,eAAOjB,IAAI,CAACiB,CAAD,CAAX;AACA;AACD;AACD,GAjBiB,CAAlB;AAkBA;;;;;;"}