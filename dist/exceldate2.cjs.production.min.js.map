{"version":3,"file":"exceldate2.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["const secondsInDay = 24 * 60 * 60\nconst millisecondsInDay = secondsInDay * 1000;\nconst missingLeapYearDay = millisecondsInDay\n\nexport function getExcelEpoch()\n{\n\tconst excelEpoch = new Date(Date.UTC(1899, 11, 31))\n\n\treturn excelEpoch\n}\n\nexport function getExcelDelta()\n{\n\tconst excelEpochTs = getExcelEpoch().getTime();\n\n\tconst excelDelta = excelEpochTs - missingLeapYearDay\n\n\treturn excelDelta\n}\n\nexport type IExcelDateNumberInput = string | number;\n\nexport function validDateNumber(excelDateNumber: number): excelDateNumber is number\n{\n\treturn !(typeof excelDateNumber !== 'number' || !Number.isFinite(excelDateNumber) || Number.isNaN(excelDateNumber) || excelDateNumber <= 0)\n}\n\nexport function excelDateNumber(excelDate: IExcelDateNumberInput): number\n{\n\t// @ts-ignore\n\tconst value = Number.parseFloat(excelDate, 10)\n\n\tif (validDateNumber(value))\n\t{\n\t\treturn value\n\t}\n}\n\n/**\n * Convert input to a number\n */\nexport function excelDateNumberToTs(excelDate: IExcelDateNumberInput)\n{\n\tconst value = excelDateNumber(excelDate)\n\n\tif (typeof value === 'number')\n\t{\n\t\t//const excelDateSeconds = value * secondsInDay;\n\t\tconst excelDateMilliseconds = value * millisecondsInDay;\n\n\t\treturn excelDateMilliseconds\n\t}\n}\n\nexport function ts2excel(milliseconds: number)\n{\n\tconst excelDelta = getExcelDelta();\n\n\treturn milliseconds - excelDelta;\n}\n\nexport function date2excel(date: Date)\n{\n\treturn ts2excel(date.getTime());\n}\n\n/**\n * Convert input to JS Date\n * Details here (mostly in comments): https://gist.github.com/christopherscott/2782634\n *\n * @link https://gist.github.com/christopherscott/2782634\n */\nexport function exceldateTs<T = number>(excelDate: IExcelDateNumberInput,\n\tdone = (err: Error, unixTs?: number): T =>\n\t{\n\t\tif (err) throw err\n\t\treturn unixTs as any\n\t},\n)\n{\n\tif (!excelDate)\n\t{\n\t\treturn done(new Error('No first argument provided, nothing to convert.'))\n\t}\n\n\ttry\n\t{\n\t\tconst excelTs = excelDateNumberToTs(excelDate);\n\n\t\tif (typeof excelTs !== 'number')\n\t\t{\n\t\t\treturn done(new Error('First argument could not be parsed.'))\n\t\t}\n\n\t\tconst excelDelta = getExcelDelta();\n\n\t\tconst unixTs = excelTs + excelDelta\n\n\t\treturn done(null, unixTs)\n\t}\n\tcatch (e)\n\t{\n\t\treturn done(e)\n\t}\n}\n\n/**\n * Takes an Excel timestamp (as a number or string) and returns a corresponding Date object\n */\nexport function exceldate<T = Date>(excelDate: IExcelDateNumberInput,\n\tdone = (err: Error, res?: Date): T =>\n\t{\n\t\tif (err) throw err\n\t\treturn res as any\n\t},\n)\n{\n\treturn exceldateTs(excelDate, (err: Error, unixTs?: number) => {\n\t\tif (err)\n\t\t{\n\t\t\treturn done(err)\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tconst jsDate = new Date(unixTs)\n\t\t\t\treturn done(null, jsDate)\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\treturn done(e)\n\t\t\t}\n\t\t}\n\t})\n}\n\nexport default exceldate\n"],"names":["getExcelEpoch","Date","UTC","getExcelDelta","getTime","secondsInDay","validDateNumber","excelDateNumber","Number","isFinite","isNaN","excelDate","value","parseFloat","excelDateNumberToTs","ts2excel","milliseconds","exceldateTs","done","err","unixTs","Error","excelTs","e","exceldate","res","jsDate","date"],"mappings":"sBAIgBA,WAEI,IAAIC,KAAKA,KAAKC,IAAI,KAAM,GAAI,cAKhCC,WAEMH,IAAgBI,UAZZC,eAqBVC,EAAgBC,WAEK,iBAApBA,IAAiCC,OAAOC,SAASF,IAAoBC,OAAOE,MAAMH,IAAoBA,GAAmB,YAG1HA,EAAgBI,OAGzBC,EAAQJ,OAAOK,WAAWF,EAAW,OAEvCL,EAAgBM,UAEZA,WAOOE,EAAoBH,OAE7BC,EAAQL,EAAgBI,MAET,iBAAVC,SA5CcP,MA+CMO,WAMhBG,EAASC,UAIjBA,EAFYb,aAgBJc,EAAwBN,EACvCO,eAAAA,IAAAA,EAAO,SAACC,EAAYC,MAEfD,EAAK,MAAMA,SACRC,KAIHT,SAEGO,EAAK,IAAIG,MAAM,4DAKhBC,EAAUR,EAAoBH,SAEb,iBAAZW,EAEHJ,EAAK,IAAIG,MAAM,wCAOhBH,EAAK,KAFGI,EAFInB,KAMpB,MAAOoB,UAECL,EAAKK,aAOEC,EAAoBb,EACnCO,mBAAAA,IAAAA,EAAO,SAACC,EAAYM,MAEfN,EAAK,MAAMA,SACRM,IAIDR,EAAYN,GAAW,SAACQ,EAAYC,MACtCD,SAEID,EAAKC,WAMLO,EAAS,IAAIzB,KAAKmB,UACjBF,EAAK,KAAMQ,GAEnB,MAAOH,UAECL,EAAKK,0FAtEWI,UAEnBZ,EAASY,EAAKvB"}